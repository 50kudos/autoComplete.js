(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.autoComplete = factory());
}(this, (function () { 'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  // Gets the user's input value
  var getSearchInput = function getSearchInput() {
    return document.querySelector("#autoComplete");
  }; // Creats the results list HTML tag


  var createResultsList = function createResultsList(listContainer) {
    var list = document.createElement("ul");
    list.setAttribute("class", "autoComplete_results_list");
    listContainer.appendChild(list);
  }; // Creates results list container


  var createResultsListContainer = function createResultsListContainer() {
    var listContainer = document.createElement("div");
    listContainer.setAttribute("class", "autoComplete_results_list_container");
    getSearchInput().insertAdjacentElement("afterend", listContainer);
    createResultsList(listContainer);
  };

  createResultsListContainer(); // Adding matching results to the list

  var addResultsToList = function addResultsToList(results, cleanResults, dataAttribute) {
    var resultState;
    var resultsList = document.querySelector(".autoComplete_results_list");
    results.forEach(function (event, record) {
      var result = document.createElement("li");
      result.setAttribute("data-".concat(dataAttribute.tag), dataAttribute.value || cleanResults[record]);
      resultState = results.length === 1 ? "autoComplete_result autoComplete_single_result" : "autoComplete_result";
      result.setAttribute("id", cleanResults[record]);
      result.setAttribute("class", resultState);
      result.innerHTML = results[record];
      resultsList.appendChild(result);
    });
  }; // Clears user input


  var clearInput = function clearInput() {
    return getSearchInput().value = "";
  }; // Clears the list of results


  var clearResults = function clearResults() {
    var resultsList = document.querySelector(".autoComplete_results_list");
    resultsList.innerHTML = "";
  }; // Gets user selection


  var getSelection = function getSelection(value) {
    var results = document.querySelectorAll(".autoComplete_result");
    results.forEach(function (selection) {
      selection.addEventListener("click", function (event) {
        // value(event.target.closest(".autoComplete_result"));
        value(event.target.closest(".autoComplete_result")); // Clear Input after selection is made

        clearInput(); //Clear Results after selection is made

        clearResults(); // Set placeholder with the selected value
        // after checking the value length and validate it

        getSearchInput().setAttribute("placeholder", "".concat(event.target.closest(".autoComplete_result").id));
      });
    });
  }; // Error message render to UI


  var error = function error(_error) {
    document.querySelector("body").innerHTML = "\n\t\t<div class=\"autoComplete_error\">\n\t\t\t<div class=\"autoComplete_message\">".concat(_error, "</div>\n\t\t</div>\n\t");
  };

  var renderResults = {
    getSearchInput: getSearchInput,
    addResultsToList: addResultsToList,
    getSelection: getSelection,
    clearInput: clearInput,
    clearResults: clearResults,
    error: error
  };

  var autoComplete =
  /*#__PURE__*/
  function () {
    function autoComplete(config) {
      _classCallCheck(this, autoComplete);

      // Source of data list
      this.dataSrc = function () {
        if (Array.isArray(config.dataSrc)) {
          return config.dataSrc;
        } else if (Array.isArray(config.dataSrc())) {
          return config.dataSrc();
        } else {
          renderResults.error("<strong>Error</strong>, <strong>data source</strong> value is not an <strong>Array</string>.");
        }
      }; // Search engine type


      this.searchEngine = config.searchEngine === "loose" ? config.searchEngine : "strict"; // Placeholder text

      this.placeHolder = String(config.placeHolder) ? config.placeHolder : false; // Maximum number of results to show

      this.maxResults = Number(config.maxResults) ? config.maxResults : 10; // Highlighting matching results

      this.highlight = typeof config.highlight === "boolean" ? config.highlight : true; // Assign data attribute tag & value if set in object

      this.dataAttribute = config.dataAttribute === Object ? {
        tag: config.dataAttribute.tag,
        value: config.dataAttribute.value
      } : {
        tag: "autocomplete",
        value: ""
      }; // Action function on result selection

      this.onSelection = typeof config.onSelection === "function" ? config.onSelection : renderResults.error("<strong>Error</strong>, <strong>onSelection</strong> value is not a <strong>Function</string>."); // Starts the app Enigne

      this.init();
    } // Search common characters within record


    _createClass(autoComplete, [{
      key: "search",
      value: function search(query, record) {
        // Loose mode
        if (this.searchEngine === "loose") {
          // Search query string sanitized & normalized
          query = query.replace(/ /g, "").toLowerCase(); // Array of matching characters

          var match = []; // Query character position based on success

          var searchPosition = 0; // Iterate over record characters

          for (var number = 0; number < record.length; number++) {
            // Holds current record character
            var recordChar = record[number]; // Matching case

            if (searchPosition < query.length && recordChar.toLowerCase() === query[searchPosition]) {
              if (this.highlight) {
                // Highlight matching character
                recordChar = "<span class=\"autoComplete_highlighted_result\">" + recordChar + "</span>"; // Increment search position

                searchPosition++;
              } else {

                searchPosition++;
              }
            } // Adds matching character to the matching list


            match.push(recordChar);
          } // Non-Matching case


          if (searchPosition !== query.length) {
            return "";
          } // Return the joined match


          return match.join(""); // Strict mode
        } else if (this.searchEngine === "strict") {
          if (record.toLowerCase().includes(query.toLowerCase())) {
            // If Highlighted
            if (this.highlight) {
              this.resList.push(record.toLowerCase().replace(renderResults.getSearchInput().value.toLowerCase(), "<span class=\"autoComplete_highlighted_result\">".concat(renderResults.getSearchInput().value.toLowerCase(), "</span>")));
              this.cleanResList.push(record); // If NOT Hightligthed
            } else {
              this.resList.push(record);
              this.cleanResList.push(record);
            }
          }
        }
      } // List all matching results

    }, {
      key: "listMatchedResults",
      value: function listMatchedResults() {
        var _this = this;

        // Final highlighted results list of array
        this.resList = []; // Final clean results list of array

        this.cleanResList = []; // Holds the input search value

        var inputValue = renderResults.getSearchInput().value;

        try {
          // Checks input matches in data source
          this.dataSrc().filter(function (record) {
            var match = _this.search(inputValue, record);

            if (match) {
              _this.resList.push(match);

              _this.cleanResList.push(record);
            }
          });
        } catch (error) {
          renderResults.error(error);
        } // Rendering matching results to the UI list


        renderResults.addResultsToList(this.resList.slice(0, this.maxResults), this.cleanResList.slice(0, this.maxResults), this.dataAttribute);
      } // Checks user's input search value validity

    }, {
      key: "searchInputValidation",
      value: function searchInputValidation(selector) {
        var _this2 = this;

        // Input field handler fires an event onKeyup action
        selector.addEventListener("keyup", function () {
          // event.preventDefault();
          // Check if input is not empty or just have space before triggering the app
          if (selector.value.length > 0 && selector.value !== " ") {
            // clear results list
            renderResults.clearResults(); // List matching results

            _this2.listMatchedResults(); // Gets user's selection


            renderResults.getSelection(_this2.onSelection);
          } else {
            // clears all results list
            renderResults.clearResults();
          }
        });
      } // Placeholder setting function

    }, {
      key: "setPlaceHolder",
      value: function setPlaceHolder() {
        if (this.placeHolder) {
          renderResults.getSearchInput().setAttribute("placeholder", this.placeHolder);
        }
      } // Starts the app Enigne

    }, {
      key: "init",
      value: function init() {
        try {
          // If the data source is valid run the app else error
          if (this.dataSrc()) {
            this.setPlaceHolder();
            this.searchInputValidation(renderResults.getSearchInput());
          }
        } catch (error) {
          renderResults.error("<strong>error</strong>, autoComplete <strong>engine</strong> is not <strong>starting</strong>...");
        }
      }
    }]);

    return autoComplete;
  }();

  return autoComplete;

})));
